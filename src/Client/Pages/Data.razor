@page "/data"
@using HsaLedger.Application.Requests
@using HsaLedger.Application.Responses.Projections
@using HsaLedger.Client.Common
@using HsaLedger.Client.Common.Extensions
@using HsaLedger.Client.Common.Models
@using HsaLedger.Client.Dialogs
@using HsaLedger.Domain.Common.Model

<PageTitle>HSA | Data</PageTitle>
<MudDataGrid T="TransactionModel" @ref="_dataGrid" MultiSelection="true" ServerData="LoadServerData"
             SortMode="SortMode.Single" Filterable="true" Dense="true"
             EditMode="DataGridEditMode.Form" EditTrigger="DataGridEditTrigger.Manual"
             CommittedItemChanges="@CommittedItemChanges" ReadOnly="false">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@DataGridTitle</MudText>
        <MudSpacer />
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Success"
                   Size="Size.Small" Style="margin-left:1em;" OnClick="ShowAddDialog">Add</MudButton>
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Info"
                   Size="Size.Small" Style="margin-left:1em;" OnClick="ShowEditDialog">Edit</MudButton>
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Download" Color="Color.Success"
                   Size="Size.Small" Style="margin-left:1em;" OnClick="Export">Export</MudButton>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="TransactionModel" />
        <PropertyColumn Property="x => x.TransactionType.Code" Title="Type">
            <EditTemplate>
                <MudSelect T="TransactionTypeModel" ToStringFunc="_transactionTypeConverter"
                           @bind-Value="context.Item.TransactionType" Margin="@Margin.Dense" Label="Type"
                           Variant="Variant.Outlined">
                    @foreach (var transactionType in _transactionTypes)
                    {
                        <MudSelectItem T="TransactionTypeModel" Value="@transactionType">@transactionType.Code</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Provider.Name" Title="Provider">
            <EditTemplate>
                <MudSelect T="ProviderModel" ToStringFunc="_providerConverter" @bind-Value="context.Item.Provider" 
                           Margin="@Margin.Dense" Label="Provider" Variant="Variant.Outlined">
                    @foreach (var provider in _providers)
                    {
                        <MudSelectItem T="ProviderModel" Value="@provider">@provider.Name</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        @* ReSharper disable once CSharpWarnings::CS8602 *@
        <PropertyColumn Property="x => x.Person.Name" Title="Person">
            <EditTemplate>
                <MudSelect T="PersonModel" ToStringFunc="_personConverter" @bind-Value="context.Item.Person" 
                           Margin="@Margin.Dense" Label="Person" Variant="Variant.Outlined">
                    <MudSelectItem T="PersonModel"></MudSelectItem>
                    @foreach (var person in _persons)
                    {
                        <MudSelectItem T="PersonModel" Value="@person">@person.Name</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Date" Title="Date" Format="MM/dd/yyyy">
            <EditTemplate>
                <MudDatePicker @bind-Date="context.Item.Date" Label="Date" Variant="Variant.Outlined" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Amount" Title="Amount" Format="C2">
            <EditTemplate>
                <MudNumericField @bind-Value="context.Item.Amount" Label="Amount" Variant="Variant.Outlined" Step="1M" Format="C2" />
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.IsPaid" Title="Paid">
            <CellTemplate>
                @if (context.Item.IsPaid)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
                }
            </CellTemplate>
            <EditTemplate>
                <MudCheckBox @bind-Value="context.Item.IsPaid" Label="Paid" Color="Color.Primary"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.IsHsaWithdrawn" Title="HSA Withdrawn">
            <CellTemplate>
                @if (context.Item.IsHsaWithdrawn)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
                }
            </CellTemplate>
            <EditTemplate>
                <MudCheckBox @bind-Value="context.Item.IsHsaWithdrawn" Label="HSA Withdrawn" Color="Color.Primary"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.IsAudited" Title="Audited">
            <CellTemplate>
                @if (context.Item.IsAudited)
                {
                    <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
                }
            </CellTemplate>
            <EditTemplate>
                <MudCheckBox @bind-Value="context.Item.IsAudited" Label="Audited" Color="Color.Primary"/>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.GetDocumentNames()" Title="Documents" Filterable="false">
            <EditTemplate>
                <MudFileUpload T="IReadOnlyList<IBrowserFile>" Accept=".jpg, .png, .pdf" FilesChanged="x => AddToPendingUpload(x, context.Item)" MaximumFileCount="100">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.CloudUpload">
                            Upload documentation
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </EditTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.LastUpdatedBy" Title="Updated By" Editable="false" Filterable="false"/>
        <PropertyColumn Property="x => x.LastUpdatedTime" Title="Updated" Format="MM/dd/yyyy" Editable="false" Filterable="false"/>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Download" OnClick="() => DownloadDocuments(context.Item)" Disabled="!context.Item.IsDocumentAvailable"/>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync"/>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="() => Delete(context.Item)" Disabled="!context.Item.AllowDelete"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="TransactionModel" />
    </PagerContent>
</MudDataGrid>

@code {
    private const string DataGridTitle = "Data";
    private MudDataGrid<TransactionModel>? _dataGrid;
    private List<ProviderModel> _providers = new();
    private List<TransactionTypeModel> _transactionTypes = new();
    private List<PersonModel> _persons = new();
    private readonly Func<ProviderModel?,string> _providerConverter = a => a?.Name ?? "";
    private readonly Func<TransactionTypeModel?,string> _transactionTypeConverter = a => a?.Code ?? "";
    private readonly Func<PersonModel?,string> _personConverter = a => a?.Name ?? "";
    
    protected override async Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var providers = await GetProviders();
        var transactionTypes = await GetTransactionTypes();
        var persons = await GetPersons();
        _providers = providers?.ToList() ?? [];
        _transactionTypes = transactionTypes?.ToList() ?? [];
        _persons = persons?.ToList() ?? [];
    }
    
    private async Task<GridData<TransactionModel>> LoadServerData(GridState<TransactionModel> state)
    {
        var tablePageRequest = new GridQueryRequest
        {
            Page = state.Page,
            PageSize = state.PageSize,
            Sorts = state.SortDefinitions.Select(s => new SortDefinition
            {
                Property = s.SortBy,
                Direction = s.Descending ? "Descending" : "Ascending"
            }).ToList(),

            Filters = state.FilterDefinitions.Select(f => new FilterDefinition
            {
                Property = f.Title ?? string.Empty,
                Operator = f.Operator ?? "",     // This comes from MudBlazorâ€™s built-in filtering operators
                Value = f.Value?.ToString()
            }).ToList()
        };
        
        await Task.Yield();
        
        var result = await _transactionManager.GetPaged(tablePageRequest);

        if (!result.Succeeded)
        {
            if (result.Messages != null)
            {
                _snackBar.Add(string.Join(",", result.Messages), Severity.Error);
            }
            else
            {
                _snackBar.Add("Error loading data", Severity.Error);
            }
            return new GridData<TransactionModel>
            {
                TotalItems = 0,
                Items = new List<TransactionModel>()
            };
        }
        
        return new GridData<TransactionModel>
        {
            Items = result.Data?.Items?.AsQueryable().Select(TransactionModel.Projection).ToList() ?? [],
            TotalItems = result.Data?.TotalItems ?? 0
        };
    }
    
    private async Task Delete(TransactionModel transaction)
    {
        var parameters = new DialogParameters
        {
            {nameof(Confirmation.ConfirmationType), "Delete"},
            {nameof(Confirmation.TitleIcon), Icons.Material.Filled.Delete},
            {nameof(Confirmation.ContentText), $"Are you sure you want to delete {transaction.TransactionId}?"},
            {nameof(Confirmation.ButtonText), "Yes"},
            {nameof(Confirmation.Color), Color.Error}
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await _dialogService.ShowAsync<Confirmation>("", parameters, options);

        var dialogResult = await dialog.Result;
        if (dialogResult is { Canceled: false, Data: bool isCompletedSuccessfully })
        {
            if (!isCompletedSuccessfully)
            {
                return;
            }
            
            var result = await _transactionManager.Delete(transaction.TransactionId);
            
            await AlertHelper.DataAccessAlertHandler(_snackBar, result, 
                "Deletion successful",
                AlertHelper.DeleteFallbackErrorMessage,
                () => _dataGrid!.ReloadServerData());
        }
    }

    private async Task ShowEditDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        
        var parameters = new DialogParameters
        {
            {nameof(AddTransaction.Providers), _providers},
            {nameof(AddTransaction.TransactionTypes), _transactionTypes},
            {nameof(AddTransaction.Persons), _persons},
        };
        
        var dialog = await _dialogService.ShowAsync<EditTransactionInMass>("", parameters, options);

        var dialogResult = await dialog.Result;

        if (dialogResult == null || dialogResult.Canceled)
        {
            return;
        }

        var data = dialogResult.Data;

        if (data is EditTransactionModel model)
        {
            var selectedItems = _dataGrid!.SelectedItems;

            var setRequests = selectedItems.Select(item =>
            {
                var setTransactionRequest = new SetTransactionRequest
                {
                    TransactionId = item.TransactionId,
                    TransactionTypeId = model.TransactionType?.TransactionTypeId ?? item.TransactionTypeId,
                    ProviderId = model.Provider?.ProviderId ?? item.ProviderId,
                    PersonId = model.Person?.PersonId ?? item.PersonId,
                    Date = model.Date ?? item.Date ?? DateTime.MaxValue,
                    Amount = model.IsAmountDirty ? model.Amount : item.Amount,
                    IsPaid = model.IsPaid ?? item.IsPaid,
                    IsHsaWithdrawn = model.IsHsaWithdrawn ?? item.IsHsaWithdrawn,
                    IsAudited = model.IsAudited ?? item.IsAudited
                };
                return setTransactionRequest;
            }).ToList();

            var result = await _transactionManager.Post(setRequests);
            
            await AlertHelper.DataAccessAlertHandler(_snackBar, result, 
                "Update successful",
                AlertHelper.AddFallbackErrorMessage,
                () => _dataGrid!.ReloadServerData());
        }
    }

    private async Task ShowAddDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        
        var parameters = new DialogParameters
        {
            {nameof(AddTransaction.Providers), _providers},
            {nameof(AddTransaction.TransactionTypes), _transactionTypes},
            {nameof(AddTransaction.Persons), _persons},
        };
        
        var dialog = await _dialogService.ShowAsync<AddTransaction>("", parameters, options);

        var dialogResult = await dialog.Result;

        if (dialogResult == null || dialogResult.Canceled)
        {
            return;
        }

        var data = dialogResult.Data;

        if (data is NewTransactionModel model)
        {
            var documents = new List<AddDocumentRequest>();
            foreach (var file in model.FilesPendingUpload ?? [])
            {
                var content = await file.GetFileBytesAsync();
                var uploadRequest = new AddDocumentRequest
                {
                    Fullname = file.Name,
                    Name = Path.GetFileNameWithoutExtension(file.Name),
                    Extension = Path.GetExtension(file.Name),
                    Content = content
                };

                documents.Add(uploadRequest);
            }
            
            
            var result = await _transactionManager.Put(new AddTransactionRequest
            {
                TransactionTypeId = model.TransactionType.TransactionTypeId,
                ProviderId = model.Provider.ProviderId,
                PersonId = model.Person?.PersonId,
                Date = model.Date!.Value,
                Amount = model.Amount,
                IsPaid = model.IsPaid,
                IsHsaWithdrawn = model.IsHsaWithdrawn,
                IsAudited = model.IsAudited,
                Documents = documents
            });
            
            await AlertHelper.DataAccessAlertHandler(_snackBar, result, 
                "Add successful",
                AlertHelper.AddFallbackErrorMessage, () => _dataGrid!.ReloadServerData());
        }
    }
    
    private void AddToPendingUpload(IReadOnlyList<IBrowserFile>? files, TransactionModel item)
    {
        item.FilesPendingUpload = new List<IBrowserFile>(files ?? []);
        item.IsPendingUpload = true;
    }

    private async Task DownloadDocuments(TransactionModel transaction)
    {
        foreach (var document in transaction.Documents)
        {
            var result = await _documentManager.Download(document.DocumentId);

            if (result is { Succeeded: true, Data: not null })
            {
                await _jsRuntime.InvokeVoidAsync("Download", new
                {
                    ByteArray = Convert.ToBase64String(result.Data),
                    FileName = document.Fullname
                });
            }
        }
    }
    
    private async Task Export()
    {
        var result = await _transactionManager.Get();
        if (!result.Succeeded)
        {
            if (result.Messages != null)
            {
                foreach (var message in result.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
            else
            {
                _snackBar.Add("Error getting data to export", Severity.Error);
            }
        }

        var encodedByteArray = await _clientExcelService.ExportAsync(
            result.Data!,
            sheetName: "Transactions",
            mappers: new Dictionary<string, Func<TransactionResponse, object>>
            {
                //{ "Block Schedule Type", item => item.BlockScheduleType },
                { "Id", item => $"{item.TransactionId}" },
                { "Type", item => item.TransactionType.Code },
                { "Provider", item => item.Provider.Name },
                { "Person", item => item.Person?.Name ?? "" },
                { "Date", item => $"'{item.Date:M/d/yy}" },
                { "Amount", item => item.Amount },
                { "Paid", item => item.IsPaid ? "Y" : "N" },
                { "HSA Withdrawn", item => item.IsHsaWithdrawn ? "Y" : "N" },
                { "Audited", item => item.IsAudited ? "Y" : "N" },
                { "Created By", item => item.CreatedBy ?? "" },
                { "Created On", item => $"'{item.CreatedTime:M/d/yy HH:mm}" },
                { "Last Updated By", item => item.LastUpdatedBy ?? "" },
                { "Last Updated On", item => $"'{item.LastUpdatedTime:M/d/yy HH:mm}" }
            });

        var fileName = $"All_Transactions_{DateTime.Now:dd-MM-yyyy HH-mm-ss}.xlsx";

        await _jsRuntime.InvokeVoidAsync("Download", new
        {
            ByteArray = encodedByteArray,
            FileName = fileName
        });
    }

    private async Task CommittedItemChanges(TransactionModel item)
    {
        var hasError = false;
        // set
        var result = await _transactionManager.Post(new SetTransactionRequest
        {
            TransactionId = item.TransactionId,
            TransactionTypeId = item.TransactionType.TransactionTypeId,
            ProviderId = item.Provider.ProviderId,
            PersonId = item.Person?.PersonId,
            Date = item.Date ?? DateTime.MinValue,
            Amount = item.Amount,
            IsPaid = item.IsPaid,
            IsHsaWithdrawn = item.IsHsaWithdrawn,
            IsAudited = item.IsAudited,
        });

        if (item.IsPendingUpload)
        {
            // delete current documents
            foreach (var document in item.Documents)
            {
                await _documentManager.Delete(document.DocumentId);
            }
            
            // upload new documents
            foreach (var file in item.FilesPendingUpload ?? [])
            {
                var content = await file.GetFileBytesAsync();
                var uploadRequest = new AddDocumentRequest
                {
                    TransactionId = item.TransactionId,
                    Fullname = file.Name,
                    Name = Path.GetFileNameWithoutExtension(file.Name),
                    Extension = Path.GetExtension(file.Name),
                    Content = content
                };
                
                var addDocumentResult = await _documentManager.Put(uploadRequest);
                
                if(!addDocumentResult.Succeeded)
                {
                    await AlertHelper.DataAccessAlertHandler(_snackBar, addDocumentResult, 
                        "Failed to upload document",
                        AlertHelper.UpdateFallbackErrorMessage);

                    hasError = true;
                }
            }
            
            // retrieve documents from database
            var documentsResult = await _transactionManager.GetDocuments(item.TransactionId);
            if (documentsResult.Succeeded)
            {
                item.Documents = documentsResult.Data?
                    .AsQueryable()
                    .Select(DocumentModel.Projection)
                    .ToList() ?? [];
            }
            else
            {
                await AlertHelper.DataAccessAlertHandler(_snackBar, documentsResult, 
                    "Failed to retrieve documents",
                    AlertHelper.UpdateFallbackErrorMessage);

                hasError = true;
            }
        }

        if (!hasError)
        {
            await AlertHelper.DataAccessAlertHandler(_snackBar, result, 
                "Update successful",
                AlertHelper.UpdateFallbackErrorMessage, () => _dataGrid!.ReloadServerData());
        }
    }

    private async Task<IEnumerable<ProviderModel>?> GetProviders()
    {
        var result = await _providerManager.Get();

        var data = result.Data?
            .AsQueryable()
            .Select(ProviderModel.Projection)
            .OrderBy(x => x.Name);
        return data;
    }

    private async Task<IEnumerable<TransactionTypeModel>?> GetTransactionTypes()
    {
        var result = await _transactionTypeManager.Get();

        var data = result.Data?
            .AsQueryable()
            .Select(TransactionTypeModel.Projection)
            .OrderBy(x => x.Code);
        return data;
    }

    private async Task<IEnumerable<PersonModel>?> GetPersons()
    {
        var result = await _personManager.Get();

        var data = result.Data?
            .AsQueryable()
            .Select(PersonModel.Projection)
            .OrderBy(x => x.Name);
        return data;
    }
}