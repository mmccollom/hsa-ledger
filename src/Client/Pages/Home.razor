@page "/"
@using HsaLedger.Client.Common.Models

<PageTitle>HSA | Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h5">Overview</MudText>

    <MudDivider Class="my-4" />

    <MudGrid GutterSize="3">
        @foreach (var card in _summaryCards)
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardContent>
                        <MudText Typo="Typo.subtitle1">@card.Label</MudText>
                        <MudText Typo="Typo.h5">@card.Value</MudText>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
    </MudGrid>
</MudContainer>

@code {
    private List<TransactionModel> _transactions = new();
    private List<(string Label, string Value)> _summaryCards = new();

    protected override async Task OnInitializedAsync()
    {
        var transactions = await GetTransactions();
        
        _transactions = transactions?.ToList() ?? [];

        var total = _transactions.Sum(t => t.Amount);
        var paid = _transactions.Where(t => t.IsPaid).Sum(t => t.Amount);
        var unpaid = total - paid;
        var withdrawn = _transactions.Where(t => t.IsHsaWithdrawn).Sum(t => t.Amount);
        var notWithdrawn = total - withdrawn;

        _summaryCards =
        [
            ("Total Spent", $"{total:C2}"),
            ("Paid", $"{paid:C2}"),
            ("Unpaid", $"{unpaid:C2}"),
            ("Withdrawn", $"{withdrawn:C2}"),
            ("Not Withdrawn", $"{notWithdrawn:C2}"),
            ("Transactions", _transactions.Count.ToString())
        ];
    }

    private async Task<IEnumerable<TransactionModel>?> GetTransactions()
    {
        var result = await _transactionManager.Get();

        return result.Data?.AsQueryable().Select(TransactionModel.Projection);
    }
}
